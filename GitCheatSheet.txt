//Setting your git for corporate environment so that you can push your code in your repository  

>git config --global http.proxy http://proxyuser:proxypwd@proxy.server.com:8080

change proxyuser to your proxy user
change proxypwd to your proxy password
change proxy.server.com to the URL of your proxy server
change 8080 to the proxy port configured on your proxy server

If you decide at any time to reset this proxy and work without proxy.
Command to use:

git config --global --unset http.proxy
Finally, to check the currently set proxy:

git config --global --get http.proxy

****************************************************************************************************************************
Git : Git is a software version control system. It helps us to code large projects effectively when many coders are are writing code in the same time for the project.

>git init
//Makes your folder ready for git client.This file will be invisible in your folder.

>git add .
//Add all the saved files in staging area.
//You can put invidual files by putting .txt, .html .

>git commit -m "Initial commit"
//Commit means saving your files in the repository and message details will help you to identify individual commits. 

>git remote add origin https://github.com/sid28gunner/javalevel1
//After you set up your repository you can set the URL of origin 

>git push -f origin master
//Push all the changes in the origin master(by default master is the manin branch)

**************************************************************************************************************88
2. Working in local environment

> git init

> git status
  //To check whether something is pending or not.

> git add .
  //Adds all the files in the staging area

> git commit -m "Second Commit"

> > git log
  //To check the details of the commit.

> touch .gitignore
  //ignoring certain types of files and put the type of files you want to ignore
  
> git branch myBranch
 //Create a local branch

> git switch myBranch
 //Switch to your local branch
 
> touch index.css
  //Create a index.css file
  
> git add .

> git commit -m "My branch update"

> git checkout master
//Moves the git head or move to your master branch

> git merge myBranch
 //Go to the directory you want to merge the files in this case master and merge myBranch with it.

> git commit -a -m "update in a single command"
//Single command to add and message

//Merge conflicts : Merging master with myBranch say same file name but different text at lines so there will be issue
   So git will tell you where the problem is arising and you can remove those lines and merge it.
***************************************************************************************************************************************************
//Lets say you are working in a repository and you want to move to some other branch but dont want to commit those changes right now but stage those changes

> git add .

> git stash
//Add those changes in staging area but don't just commit them till you want to do it.

//Finish your stuff there come to your branch

> git stash apply  
//start from where you have left off.
